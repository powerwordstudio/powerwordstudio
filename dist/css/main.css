/*! de-style.css v1.0.5 | MIT License | https://github.com/nicolas-cusan/destyle.css */*{box-sizing:border-box}:after,:before{box-sizing:inherit}html{line-height:1.15;-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:transparent}body{margin:0}main{display:block}address,blockquote,dl,figure,form,iframe,p,pre,table{margin:0}h1,h2,h3,h4,h5,h6{font-size:inherit;line-height:inherit;font-weight:inherit;margin:0}ol,ul{margin:0;padding:0;list-style:none}dt{font-weight:700}dd{margin-left:0}hr{box-sizing:content-box;height:0;overflow:visible;border:0;border-top:1px solid;margin:0;clear:both}pre{font-family:monospace,monospace;font-size:inherit}address{font-style:inherit}a{background-color:transparent;text-decoration:none;color:inherit}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:inherit}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none;vertical-align:bottom}embed,iframe,object{border:0;vertical-align:bottom}button,input,optgroup,select,textarea{vertical-align:middle;color:inherit;font:inherit;border:0;background:transparent;padding:0;margin:0;outline:0}select{-webkit-appearance:none;-moz-appearance:none;appearance:none;border-radius:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none}[type=button][disabled],[type=reset][disabled],[type=submit][disabled],button[disabled]{cursor:default}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{margin:0;padding:0;border:0;min-width:0}legend{color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}::-webkit-input-placeholder{font:inherit}:-ms-input-placeholder{font:inherit}::-ms-input-placeholder{font:inherit}::-moz-placeholder{font:inherit}::placeholder{font:inherit}label[for]{cursor:pointer}details{display:block}summary{display:list-item}table{border-collapse:collapse;border-spacing:0}caption{text-align:left}td,th{vertical-align:top}th{text-align:left;font-weight:700}template{display:none}body{color:#4f4f4f;font-family:Source Sans Pro,Arial,sans-serif;font-size:22px;line-height:1;font-weight:400}b,strong{font-weight:700}.italic,em,i{font-style:italic}#site-introduction .intro-2,.light{font-weight:300}.regular{font-weight:400}.semibold{font-weight:600}#site-introduction .intro-1 span,#site-introduction h1,.bold,.footer-navigation .menu{font-weight:700}.black,.header-logo>span{font-weight:900}#site-header:after,#site-header:before,.menu:after,.menu:before,.wrapper:after,.wrapper:before{content:" ";display:table}#site-header:after,.menu:after,.wrapper:after{clear:both}#site-header,.menu,.wrapper{*zoom:1}[hidden]{display:none}body{background:#f0f0f0}.wrapper{margin:0 auto;padding:0 20px}@media (min-width:768px){.wrapper{padding:0 40px}}.wrapper.large{max-width:1800px}.wrapper.small{max-width:1200px}.wrapper.center{text-align:center}#site-header{padding:50px 0;background:#fff;line-height:50px;color:#4f4f4f}.header-logo{float:left;font-size:20px;text-transform:uppercase;letter-spacing:4px}.header-navigation{float:right;font-size:18px}#site-introduction{margin:150px 0}#site-introduction header{margin-bottom:50px}#site-introduction h1{color:rgba(0,212,119,.75);font-size:72px;line-height:90px}#site-introduction h1 span{display:block;font-size:200px;line-height:200px}#site-introduction .intro-1{font-size:36px;line-height:42px}#site-introduction .intro-2{font-size:24px;line-height:30px}#site-footer{padding:40px 0;background:#333;color:#fff}#site-footer .copyright{font-size:14px;color:hsla(0,0%,100%,.6);text-align:center}.menu{text-transform:uppercase}.header-navigation{width:100%}@media (min-width:992px){.header-navigation{width:auto}}.header-navigation #navigation-button{position:absolute;top:50px;right:20px;padding:0 15px;border:2px solid #d6dee0;border-radius:5px}@media (min-width:992px){.header-navigation #navigation-button{display:none}}.header-navigation .menu{display:none}@media (min-width:992px){.header-navigation .menu{display:block}}.header-navigation .menu.is-active{display:block}.header-navigation .menu>li{float:left;width:50%}.header-navigation .menu a{display:block;padding:10px;color:#4f4f4f;text-align:center}.header-navigation .menu a span{border-bottom:3px solid transparent}.header-navigation .menu a:hover span{border-bottom-color:#00d477}@media (min-width:992px){.header-navigation .menu>li{width:auto}.header-navigation .menu>li:not(:last-of-type){margin-right:10px}.header-navigation .menu a{padding:10px;color:#4f4f4f}.header-navigation .menu a.current{font-weight:700}}.footer-navigation .menu{font-size:16px;text-align:center}.footer-navigation .menu>li{display:inline;margin:0 10px}.footer-navigation .menu a{padding:10px}a:focus{outline:1px dotted inherit}.link{color:#00d477;-webkit-text-decoration:1px solid inherit;text-decoration:1px solid inherit}.section-header{display:flex;margin:40px 0;align-items:center;font-size:24px;font-weight:700}.section-header:first-of-type{margin-top:0}.section-header:after,.section-header:before{content:"";flex:0 1 100%;border-bottom:1px solid #4f4f4f;margin:0 40px}.section-header:before{margin-left:0}.section-header:after{margin-right:0}.gallery-container{display:flex;flex-wrap:wrap;justify-content:center;margin-left:-30px}.gallery-container .gallery-item{width:100%;padding-left:30px;margin-bottom:30px}@media (min-width:992px){.gallery-container .gallery-item{width:50%}}@media (min-width:1200px){.gallery-container .gallery-item{width:33.33333%}}.gallery-container .gallery-item img{width:100%;max-width:100%;height:auto}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
